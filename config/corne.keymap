/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&led_strip {
  chain-length = <0>;
  // chain-length = <27>;
  // 21 backlight + 6 glowlight
};

/ {
    behaviors {
        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB     &kp Q  &kp W                &kp F            &kp P                &kp B             &kp J      &kp L                 &kp U             &kp Y                 &kp SEMICOLON  &kp ESCAPE
&kp DELETE  &kp A  &hrm LEFT_CONTROL R  &hrm LEFT_ALT S  &hrm LEFT_COMMAND T  &kp G             &kp K      &hrm RIGHT_COMMAND N  &hrm RIGHT_ALT E  &hrm RIGHT_CONTROL I  &kp O          &kp BACKSPACE
&kp GRAVE   &kp X  &kp C                &kp D            &kp V                &kp Z             &kp M      &kp H                 &kp COMMA         &kp DOT               &kp FSLH       &kp BACKSLASH
                                        &kp DELETE       &sl 1                &kp LEFT_SHIFT    &kp SPACE  &sl 2                 &kp BACKSPACE
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB     &kp LEFT_PARENTHESIS  &kp LEFT_BRACKET  &kp LEFT_BRACE  &kp LESS_THAN  &kp EQUAL       &kp EQUAL     &kp GREATER_THAN  &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp RIGHT_PARENTHESIS  &kp BSPC
&bt BT_CLR  &kp NUMBER_1          &kp NUMBER_2      &kp NUMBER_3    &kp NUMBER_4   &kp NUMBER_5    &kp NUMBER_6  &kp NUMBER_7      &kp NUMBER_8     &kp NUMBER_9       &kp NUMBER_0           &bt BT_SEL 0
&kp LSHFT   &kp CARET             &kp SINGLE_QUOTE  &kp QUESTION    &kp AMPERSAND  &kp MINUS       &kp PLUS      &kp ASTERISK      &kp EXCL         &kp DOUBLE_QUOTES  &kp DOLLAR             &trans
                                                    &trans          &sl 0          &trans          &kp RET       &sl 2             &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp F1             &kp F2          &kp F3          &kp F4        &kp F5           &kp F6              &kp F7     &kp F8          &kp F9          &kp F10       &kp F11          &kp F12
&mmv MOVE_X(-300)  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &mmv MOVE_X(300)    &trans     &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans
&trans             &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans              &trans     &trans          &trans          &trans        &trans           &trans
                                                   &trans        &sl 1            &mkp LCLK           &mkp RCLK  &sl 0           &trans
            >;
        };
    };
};
